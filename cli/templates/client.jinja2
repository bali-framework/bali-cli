# Generated by the bali-cli 2.x.  DO NOT EDIT!

import logging

from google.protobuf.empty_pb2 import Empty

from . import (
    {{ filename }}_pb2 as pb2,
    {{ filename }}_pb2_grpc as pb2_grpc,
    {{ filename }}_schema as schemas,
)
from .._config import GRPC_ADDRESS, GRPC_LOGGER, GRPC_CACHE
from .._utils import ClientMixin, ParseDict

try:
    from .._config import GRPC_CHANNEL_OPTIONS
except ImportError:
    GRPC_CHANNEL_OPTIONS = None

__all__ = ["{{ service_cls }}"]

logger = logging.getLogger(GRPC_LOGGER)


class {{ service_cls }}(ClientMixin):
    URL = f"{GRPC_ADDRESS['host']}:{GRPC_ADDRESS['port']}"
    CHANNEL_OPTIONS = GRPC_CHANNEL_OPTIONS
    stub_cls = pb2_grpc.{{ service }}Stub
    logger = logger
    cache = GRPC_CACHE

    s = schemas
    schemas = schemas
{% for method in methods %}
    def {{ method[0] | decamelize }}(self{% if method[1] == "google.protobuf.Empty" %}{% else %}, schema: schemas.{{ method[1] }}{% endif %}, *, fail_silently=False, cache_timeout=0, refresh=False) -> schemas.{{ method[2] }}:
        service, rpc_name = "{{ service }}", "{{ method[0] }}"
        cache_options = {'cache_timeout': cache_timeout, 'refresh': refresh}
        cached, cache_key = self.check_cache(service, rpc_name, cache_options, {% if method[1] != "google.protobuf.Empty" %}schema{% endif %})
        if cached is not None:
             return cached
    {% if method[1] == "google.protobuf.Empty" %}
        request = Empty()
    {% else %}
        request = ParseDict(schema.dict(), pb2.{{ method[1] }}())
    {% endif %}
        reply = self.rpc_request(service, rpc_name, request, fail_silently)
        result = schemas.{{ method[2] }}(**reply)
        self.set_cache(cache_key, result, cache_timeout)
        return result
{% endfor %}
